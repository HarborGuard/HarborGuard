"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Checkbox } from "@/components/ui/checkbox"
import { CveClassification } from "@/types"

interface CveClassificationDialogProps {
  isOpen: boolean
  onClose: () => void
  cveId: string
  imageId: string
  currentClassification?: CveClassification | null
  onSave: (data: { 
    cveId: string;
    isFalsePositive: boolean;
    comment?: string;
    createdBy?: string;
  }) => Promise<void>
}

export function CveClassificationDialog({
  isOpen,
  onClose,
  cveId,
  imageId,
  currentClassification,
  onSave,
}: CveClassificationDialogProps) {
  const [isFalsePositive, setIsFalsePositive] = useState(
    currentClassification?.isFalsePositive ?? false
  )
  const [comment, setComment] = useState(currentClassification?.comment || "")
  const [createdBy, setCreatedBy] = useState(currentClassification?.createdBy || "")
  const [isSaving, setIsSaving] = useState(false)

  const handleSave = async () => {
    setIsSaving(true)
    try {
      await onSave({
        cveId,
        isFalsePositive,
        comment: comment.trim() || undefined,
        createdBy: createdBy.trim() || undefined,
      })
      onClose()
    } catch (error) {
      console.error("Failed to save CVE classification:", error)
    } finally {
      setIsSaving(false)
    }
  }

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Classify CVE</DialogTitle>
          <DialogDescription>
            Add classification and comments for {cveId}
          </DialogDescription>
        </DialogHeader>
        <div className="grid gap-4 py-4">
          <div className="flex items-center space-x-2">
            <Checkbox
              id="falsePositive"
              checked={isFalsePositive}
              onCheckedChange={(checked) => setIsFalsePositive(checked as boolean)}
            />
            <Label
              htmlFor="falsePositive"
              className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
            >
              Mark as false positive
            </Label>
          </div>
          <div className="grid gap-2">
            <Label htmlFor="comment">Comment</Label>
            <Textarea
              id="comment"
              placeholder="Add your comments about this CVE..."
              value={comment}
              onChange={(e) => setComment(e.target.value)}
              rows={3}
            />
          </div>

        </div>
        <DialogFooter>
          <Button type="button" variant="outline" onClick={onClose}>
            Cancel
          </Button>
          <Button type="button" onClick={handleSave} disabled={isSaving}>
            {isSaving ? "Saving..." : "Save Classification"}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}