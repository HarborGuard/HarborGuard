"use client"

import * as React from "react"
import { IconExternalLink, IconBrandGithub, IconShield, IconDatabase } from "@tabler/icons-react"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { Button } from "@/components/ui/button"

interface VulnerabilityUrlMenuProps {
  vulnerabilityId: string
  references: string[]
}

function getUrlIcon(url: string) {
  if (url.includes("github.com")) return <IconBrandGithub className="h-4 w-4" />
  if (url.includes("nvd.nist.gov")) return <IconShield className="h-4 w-4" />
  if (url.includes("cve.mitre.org")) return <IconDatabase className="h-4 w-4" />
  return <IconExternalLink className="h-4 w-4" />
}

function getUrlLabel(url: string): string {
  try {
    const urlObj = new URL(url)
    const domain = urlObj.hostname.replace("www.", "")
    
    // Provide friendly names for common sources
    if (domain === "nvd.nist.gov") return "NIST National Vulnerability Database"
    if (domain === "github.com") {
      if (url.includes("/advisories/")) return "GitHub Security Advisory"
      return "GitHub"
    }
    if (domain === "cve.mitre.org") return "MITRE CVE Database"
    if (domain === "security.snyk.io") return "Snyk Vulnerability Database"
    if (domain === "access.redhat.com") return "Red Hat Security"
    if (domain === "ubuntu.com") return "Ubuntu Security"
    if (domain === "debian.org") return "Debian Security"
    
    // Default to domain name
    return domain
  } catch {
    return "External Link"
  }
}

function processVulnerabilityUrls(vulnerabilityId: string, references: string[]): string[] {
  const urls = [...references]
  
  // Add smart URL detection for GHSA vulnerabilities
  if (vulnerabilityId.startsWith("GHSA-")) {
    const ghsaUrl = `https://github.com/advisories/${vulnerabilityId}`
    // Only add if not already in the list
    if (!urls.some(url => url.includes(vulnerabilityId))) {
      urls.unshift(ghsaUrl) // Add at the beginning as it's likely the most relevant
    }
  }
  
  // Add CVE link if it's a CVE and not already present
  if (vulnerabilityId.startsWith("CVE-")) {
    const nistUrl = `https://nvd.nist.gov/vuln/detail/${vulnerabilityId}`
    const mitreUrl = `https://cve.mitre.org/cgi-bin/cvename.cgi?name=${vulnerabilityId}`
    
    if (!urls.some(url => url.includes("nvd.nist.gov") && url.includes(vulnerabilityId))) {
      urls.push(nistUrl)
    }
    if (!urls.some(url => url.includes("cve.mitre.org") && url.includes(vulnerabilityId))) {
      urls.push(mitreUrl)
    }
  }
  
  // Remove duplicates while preserving order
  return Array.from(new Set(urls))
}

export function VulnerabilityUrlMenu({ vulnerabilityId, references }: VulnerabilityUrlMenuProps) {
  const processedUrls = processVulnerabilityUrls(vulnerabilityId, references)
  
  // If no URLs available, don't render anything
  if (processedUrls.length === 0) {
    return null
  }
  
  // If only one URL, render a simple link button
  if (processedUrls.length === 1) {
    return (
      <Button variant="ghost" size="sm" asChild>
        <a
          href={processedUrls[0]}
          target="_blank"
          rel="noopener noreferrer"
          title="View vulnerability details"
        >
          <IconExternalLink className="h-4 w-4" />
        </a>
      </Button>
    )
  }
  
  // Multiple URLs - show dropdown menu
  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" size="sm" title="View vulnerability details">
          <IconExternalLink className="h-4 w-4" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end" className="w-64">
        <DropdownMenuLabel>View Vulnerability Details</DropdownMenuLabel>
        <DropdownMenuSeparator />
        {processedUrls.map((url, index) => (
          <DropdownMenuItem key={index} asChild>
            <a
              href={url}
              target="_blank"
              rel="noopener noreferrer"
              className="flex items-center gap-2 cursor-pointer"
            >
              {getUrlIcon(url)}
              <span className="flex-1 truncate">{getUrlLabel(url)}</span>
            </a>
          </DropdownMenuItem>
        ))}
      </DropdownMenuContent>
    </DropdownMenu>
  )
}