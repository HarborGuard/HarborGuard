"use client"

import * as React from "react"
import { useRouter } from "next/navigation"
import { Scatter, ScatterChart, XAxis, YAxis, CartesianGrid, ResponsiveContainer, Cell } from "recharts"

import { useIsMobile } from "components/hooks/use-mobile"
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "components/components/ui/card"
import {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
} from "components/components/ui/chart"
import {
  ToggleGroup,
  ToggleGroupItem,
} from "components/components/ui/toggle-group"
import { useScans } from "@/hooks/useScans"

interface LibraryVulnerability {
  library: string
  severity: 'critical' | 'high' | 'medium' | 'low'
  count: number
  x: number
  y: number
  color: string
}

export function VulnerabilityScatterplot() {
  const router = useRouter()
  const { scans, loading } = useScans()
  const isMobile = useIsMobile()
  const [visibleSeverities, setVisibleSeverities] = React.useState<string[]>(['critical', 'high', 'medium', 'low'])

  const chartData = React.useMemo(() => {
    if (!scans || scans.length === 0) return []

    // DEBUG: Log scan data structure
    console.log('Scatterplot Debug - Total scans:', scans.length)
    if (scans.length > 0) {
      console.log('First scan structure:', {
        id: scans[0].id,
        severities: scans[0].severities,
        hasTrivy: !!scans[0].scannerReports?.trivy,
        hasGrype: !!scans[0].scannerReports?.grype,
        trivyStructure: scans[0].scannerReports?.trivy ? Object.keys(scans[0].scannerReports.trivy) : 'none',
      })
    }

    // Aggregate vulnerabilities by library-severity combination across all scans
    const libraryVulnMap = new Map<string, number>() // key: "library-severity", value: count

    scans.forEach((scan, scanIndex) => {
      // DEBUG: Log each scan's vulnerability counts
      console.log(`Scan ${scanIndex}:`, {
        severityCounts: scan.severities,
        hasReports: !!scan.scannerReports
      })

      // Process Trivy results - use the same logic as scan aggregations
      const trivyResults = scan.scannerReports?.trivy as any
      if (trivyResults?.Results) {
        console.log(`Scan ${scanIndex} - Trivy Results found:`, trivyResults.Results.length)
        trivyResults.Results.forEach((result: any, resultIndex: number) => {
          if (result.Vulnerabilities) {
            console.log(`  Result ${resultIndex} - Vulnerabilities:`, result.Vulnerabilities.length)
            result.Vulnerabilities.forEach((vuln: any) => {
              const pkgName = vuln.PkgName
              const severity = vuln.Severity?.toLowerCase()
              
              console.log(`    Vuln: ${pkgName} - ${severity}`)
              
              if (pkgName && (severity === 'critical' || severity === 'high' || severity === 'medium' || severity === 'low')) {
                const key = `${pkgName}-${severity}`
                const existing = libraryVulnMap.get(key) || 0
                libraryVulnMap.set(key, existing + 1)
              }
            })
          }
        })
      }

      // Process Grype results
      const grypeResults = scan.scannerReports?.grype as any
      if (grypeResults?.matches) {
        console.log(`Scan ${scanIndex} - Grype matches found:`, grypeResults.matches.length)
        grypeResults.matches.forEach((match: any) => {
          const library = match.artifact?.name
          const severity = match.vulnerability?.severity?.toLowerCase()
          
          console.log(`    Match: ${library} - ${severity}`)
          
          if (library && (severity === 'critical' || severity === 'high' || severity === 'medium' || severity === 'low')) {
            const key = `${library}-${severity}`
            const existing = libraryVulnMap.get(key) || 0
            libraryVulnMap.set(key, existing + 1)
          }
        })
      }
    })

    console.log('Final library-severity map:', Object.fromEntries(libraryVulnMap))

    // Convert to scatter plot data - each point represents a library-severity combination
    const dataPoints: LibraryVulnerability[] = []
    
    libraryVulnMap.forEach((count, key) => {
      const [library, severity] = key.split('-')
      if (count > 0) {
        dataPoints.push({
          library,
          severity: severity as 'critical' | 'high' | 'medium' | 'low',
          count,
          // Position: x = severity level, y = count
          x: severity === 'critical' ? Math.random() * 0.2 + 0.8 : 
             severity === 'high' ? Math.random() * 0.2 + 0.6 : 
             severity === 'medium' ? Math.random() * 0.2 + 0.4 :
             Math.random() * 0.2 + 0.2, // Critical highest, High, Medium, Low lowest
          y: count,
          color: severity === 'critical' ? '#ef4444' : 
                 severity === 'high' ? '#f97316' : 
                 severity === 'medium' ? '#eab308' :
                 '#3b82f6', // red-500, orange-500, yellow-500, blue-500
        })
      }
    })
    
    return dataPoints.sort((a, b) => b.count - a.count) // Sort by count for consistent ordering
  }, [scans])

  // Filter chart data based on visible severities
  const filteredChartData = React.useMemo(() => {
    return chartData.filter(point => visibleSeverities.includes(point.severity))
  }, [chartData, visibleSeverities])

  // Generate a stable key based on filtered chart data to force re-render when data changes
  const chartKey = React.useMemo(() => {
    if (filteredChartData.length === 0) return 'empty'
    const signature = filteredChartData
      .map(item => `${item.library}:${item.severity}:${item.count}`)
      .sort()
      .join('|')
    return `chart-${filteredChartData.length}-${signature.slice(0, 50)}`
  }, [filteredChartData])

  const handlePointClick = React.useCallback((data: LibraryVulnerability) => {
    router.push(`/library/${encodeURIComponent(data.library)}`)
  }, [router])

  const CustomTooltip = React.useCallback(({ active, payload }: any) => {
    if (active && payload && payload[0]) {
      const data = payload[0].payload as LibraryVulnerability
      return (
        <div className="rounded-lg border bg-background p-2 shadow-md">
          <div className="flex flex-col gap-1">
            <span className="text-sm font-medium">{data.library}</span>
            <span className="text-xs text-muted-foreground capitalize">
              {data.severity}: {data.count} CVEs
            </span>
          </div>
        </div>
      )
    }
    return null
  }, [])

  // Custom dot renderer to control size based on count
  const CustomDot = React.useCallback((props: any) => {
    const { cx, cy, payload } = props
    if (!payload) return <circle cx={cx} cy={cy} r={0} />
    
    const radius = Math.min(Math.max(payload.count * 3 + 4, 8), 24)
    const color = payload.color
    // Create lighter version of the border color
    const lightenColor = (hex: string) => {
      if (!hex.startsWith('#')) return hex
      const num = parseInt(hex.replace('#', ''), 16)
      const amt = 40 // Amount to lighten
      const R = (num >> 16) + amt
      const G = (num >> 8 & 0x00FF) + amt
      const B = (num & 0x0000FF) + amt
      return '#' + (0x1000000 + (R < 255 ? R < 1 ? 0 : R : 255) * 0x10000 +
        (G < 255 ? G < 1 ? 0 : G : 255) * 0x100 +
        (B < 255 ? B < 1 ? 0 : B : 255)).toString(16).slice(1)
    }
    const fillColor = lightenColor(color)
    
    return (
      <circle
        cx={cx}
        cy={cy}
        r={radius}
        fill={fillColor}
        stroke={color}
        strokeWidth={2}
        style={{ cursor: 'pointer' }}
        onClick={() => handlePointClick(payload)}
      />
    )
  }, [handlePointClick])

  if (loading) {
    return (
      <Card className="@container/card">
        <CardHeader>
          <CardTitle>Vulnerability Analysis</CardTitle>
          <CardDescription>Loading vulnerability data...</CardDescription>
        </CardHeader>
        <CardContent className="px-2 pt-4 sm:px-6 sm:pt-6">
          <div className="h-[250px] flex items-center justify-center">
            <div className="text-muted-foreground">Loading...</div>
          </div>
        </CardContent>
      </Card>
    )
  }

  return (
        <div className="*:data-[slot=card]:from-primary/5 *:data-[slot=card]:to-card dark:*:data-[slot=card]:bg-card gap-4 px-4 my-4 *:data-[slot=card]:bg-gradient-to-t *:data-[slot=card]:shadow-xs lg:px-6 @xl/main:grid-cols-2 @5xl/main:grid-cols-4">
    <Card className="@container/card">
      <CardHeader>
        <CardTitle>Library Vulnerability Analysis</CardTitle>
        <CardDescription>
          <span className="hidden @[540px]/card:block">
            Each point represents a library-severity combination. X-axis separates critical (right), high (middle), vs medium (left), Y-axis shows count. Click to explore details.
          </span>
          <span className="@[540px]/card:hidden">Library vulnerabilities by severity</span>
        </CardDescription>
      </CardHeader>
      <CardContent className="px-2 pt-4 sm:px-6 sm:pt-6">
        {/* Findings Toggle Group */}
        <div className="mb-4 flex items-center justify-between">
          <div className="flex-grow"/>
          <ToggleGroup 
            type="multiple" 
            value={visibleSeverities} 
            onValueChange={setVisibleSeverities}
            variant="outline"
            className="justify-end"
          >
            {chartData.filter(point => point.severity === 'critical').length > 0 && (
              <ToggleGroupItem
                value="critical"
                className="bg-red-500/10 text-red-700 dark:text-red-400 border-red-200 dark:border-red-800 hover:bg-red-500/20  px-2 py-1 text-xs"
              >
                C: {chartData.filter(point => point.severity === 'critical').reduce((sum, point) => sum + point.count, 0)}
              </ToggleGroupItem>
            )}
            {chartData.filter(point => point.severity === 'high').length > 0 && (
              <ToggleGroupItem
                value="high"
                className="bg-orange-500/10 text-orange-700 dark:text-orange-400 border-orange-200 dark:border-orange-800 hover:bg-orange-500/20  px-2 py-1 text-xs"
              >
                H: {chartData.filter(point => point.severity === 'high').reduce((sum, point) => sum + point.count, 0)}
              </ToggleGroupItem>
            )}
            {chartData.filter(point => point.severity === 'medium').length > 0 && (
              <ToggleGroupItem
                value="medium"
                className="bg-yellow-500/10 text-yellow-700 dark:text-yellow-400 border-yellow-200 dark:border-yellow-800 hover:bg-yellow-500/20  px-2 py-1 text-xs"
              >
                M: {chartData.filter(point => point.severity === 'medium').reduce((sum, point) => sum + point.count, 0)}
              </ToggleGroupItem>
            )}
            {chartData.filter(point => point.severity === 'low').length > 0 && (
              <ToggleGroupItem
                value="low"
                className="bg-blue-500/10 text-blue-700 dark:text-blue-400 border-blue-200 dark:border-blue-800 hover:bg-blue-500/20  px-2 py-1 text-xs"
              >
                L: {chartData.filter(point => point.severity === 'low').reduce((sum, point) => sum + point.count, 0)}
              </ToggleGroupItem>
            )}
          </ToggleGroup>
        </div>
        <ChartContainer
          config={{
            critical: {
              label: "Critical",
              color: "#dc2626",
            },
            high: {
              label: "High", 
              color: "#ea580c",
            },
          }}
          className="aspect-auto h-[250px] w-full"
        >
          <ResponsiveContainer width="100%" height="100%">
            <ScatterChart
              key={chartKey}
              data={filteredChartData}
              margin={{
                top: 20,
                right: 20,
                bottom: 20,
                left: 20,
              }}
            >
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis
                dataKey="x"
                type="number"
                domain={[0, 1.2]}
                name="Severity Level"
                tickLine={false}
                axisLine={false}
                tickFormatter={(value) => {
                  if (value > 0.7) return 'Critical'
                  if (value > 0.5) return 'High'
                  if (value > 0.3) return 'Medium'
                  return 'Low'
                }}
                ticks={visibleSeverities.length > 1 ? [0.3, 0.5, 0.7, 0.9] : [0.5]}
              />
              <YAxis
                dataKey="y"
                type="number"
                domain={[0, 'dataMax + 1']}
                name="Vulnerability Count"
                tickLine={false}
                axisLine={false}
              />
              <ChartTooltip content={CustomTooltip} />
              <Scatter
                data={filteredChartData}
                fill="#8884d8"
                shape={CustomDot}
              />
            </ScatterChart>
          </ResponsiveContainer>
        </ChartContainer>
        {filteredChartData.length === 0 && (
          <div className="text-center text-muted-foreground text-sm mt-4">
            {chartData.length === 0 
              ? "No vulnerabilities found across scanned libraries"
              : "No vulnerabilities found for the selected severity levels"
            }
          </div>
        )}
      </CardContent>
    </Card>
    </div>
  )
}