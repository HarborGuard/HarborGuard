"use client";

import * as React from "react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from "@/components/ui/dialog";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Separator } from "@/components/ui/separator";
import { ScrollArea } from "@/components/ui/scroll-area";
import { VulnerabilityUrlMenu } from "@/components/vulnerability-url-menu";
import {
  IconBug,
  IconShield,
  IconAlertTriangle,
  IconPackage,
  IconExternalLink,
  IconCalendar,
  IconHash,
  IconInfoCircle,
  IconX,
  IconCheck,
  IconCopy,
} from "@tabler/icons-react";
import { toast } from "sonner";

interface VulnerabilityDetailsModalProps {
  vulnerability: {
    cveId: string;
    severity: string;
    description?: string;
    cvssScore?: number;
    cvssVector?: string;
    packageName?: string;
    installedVersion?: string;
    fixedVersion?: string;
    publishedDate?: string;
    lastModifiedDate?: string;
    references?: string[];
    affectedImages: Array<{
      imageName: string;
      imageId: string;
      isFalsePositive: boolean;
    }>;
    falsePositiveImages: string[];
    exploitAvailable?: boolean;
    epssScore?: number;
    cweIds?: string[];
  } | null;
  isOpen: boolean;
  onClose: () => void;
}

function getSeverityColor(severity: string): "destructive" | "secondary" | "default" | "outline" {
  switch (severity?.toLowerCase()) {
    case "critical":
      return "destructive";
    case "high":
      return "secondary";
    case "medium":
      return "default";
    case "low":
    default:
      return "outline";
  }
}

export function VulnerabilityDetailsModal({
  vulnerability,
  isOpen,
  onClose,
}: VulnerabilityDetailsModalProps) {
  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
    toast.success("Copied to clipboard");
  };

  if (!vulnerability) return null;

  const trulyAffectedImages = vulnerability.affectedImages.filter(
    (img) => !img.isFalsePositive
  );

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-hidden">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-3">
            <IconBug className="h-5 w-5 text-muted-foreground" />
            <span className="font-mono">{vulnerability.cveId}</span>
            <Badge variant={getSeverityColor(vulnerability.severity)}>
              {vulnerability.severity.toUpperCase()}
            </Badge>
            {vulnerability.cvssScore && (
              <Badge
                variant={
                  vulnerability.cvssScore >= 9.0
                    ? "destructive"
                    : vulnerability.cvssScore >= 7.0
                    ? "secondary"
                    : "outline"
                }
              >
                CVSS {vulnerability.cvssScore.toFixed(1)}
              </Badge>
            )}
          </DialogTitle>
          <DialogDescription>
            Comprehensive vulnerability information and affected resources
          </DialogDescription>
        </DialogHeader>

        <ScrollArea className="h-[calc(90vh-120px)] pr-4">
          <div className="space-y-6">
            {/* Description Section */}
            {vulnerability.description && (
              <div className="space-y-2">
                <h3 className="text-sm font-semibold flex items-center gap-2">
                  <IconInfoCircle className="h-4 w-4" />
                  Description
                </h3>
                <p className="text-sm text-muted-foreground leading-relaxed">
                  {vulnerability.description}
                </p>
              </div>
            )}

            {/* Package Information */}
            <div className="space-y-2">
              <h3 className="text-sm font-semibold flex items-center gap-2">
                <IconPackage className="h-4 w-4" />
                Package Information
              </h3>
              <div className="grid grid-cols-2 gap-4 text-sm">
                <div>
                  <span className="text-muted-foreground">Package: </span>
                  <span className="font-mono">
                    {vulnerability.packageName || "N/A"}
                  </span>
                </div>
                {vulnerability.installedVersion && (
                  <div>
                    <span className="text-muted-foreground">Installed Version: </span>
                    <span className="font-mono">
                      {vulnerability.installedVersion}
                    </span>
                  </div>
                )}
                {vulnerability.fixedVersion && (
                  <div>
                    <span className="text-muted-foreground">Fixed Version: </span>
                    <Badge variant="default" className="ml-2">
                      <IconShield className="w-3 h-3 mr-1" />
                      {vulnerability.fixedVersion}
                    </Badge>
                  </div>
                )}
              </div>
            </div>

            {/* Risk Assessment */}
            <div className="space-y-2">
              <h3 className="text-sm font-semibold flex items-center gap-2">
                <IconAlertTriangle className="h-4 w-4" />
                Risk Assessment
              </h3>
              <div className="grid grid-cols-2 gap-4 text-sm">
                {vulnerability.cvssVector && (
                  <div className="col-span-2">
                    <span className="text-muted-foreground">CVSS Vector: </span>
                    <code className="font-mono text-xs bg-muted px-2 py-1 rounded">
                      {vulnerability.cvssVector}
                    </code>
                    <Button
                      variant="ghost"
                      size="icon"
                      className="h-6 w-6 ml-2"
                      onClick={() => copyToClipboard(vulnerability.cvssVector!)}
                    >
                      <IconCopy className="h-3 w-3" />
                    </Button>
                  </div>
                )}
                {vulnerability.exploitAvailable !== undefined && (
                  <div>
                    <span className="text-muted-foreground">Exploit Available: </span>
                    {vulnerability.exploitAvailable ? (
                      <Badge variant="destructive" className="ml-2">
                        <IconAlertTriangle className="w-3 h-3 mr-1" />
                        Yes
                      </Badge>
                    ) : (
                      <Badge variant="outline" className="ml-2">No</Badge>
                    )}
                  </div>
                )}
                {vulnerability.epssScore !== undefined && (
                  <div>
                    <span className="text-muted-foreground">EPSS Score: </span>
                    <Badge variant="outline" className="ml-2">
                      {(vulnerability.epssScore * 100).toFixed(2)}%
                    </Badge>
                  </div>
                )}
                {vulnerability.cweIds && vulnerability.cweIds.length > 0 && (
                  <div className="col-span-2">
                    <span className="text-muted-foreground">CWE IDs: </span>
                    {vulnerability.cweIds.map((cwe) => (
                      <Badge key={cwe} variant="outline" className="ml-1">
                        {cwe}
                      </Badge>
                    ))}
                  </div>
                )}
              </div>
            </div>

            {/* Timeline */}
            {(vulnerability.publishedDate || vulnerability.lastModifiedDate) && (
              <div className="space-y-2">
                <h3 className="text-sm font-semibold flex items-center gap-2">
                  <IconCalendar className="h-4 w-4" />
                  Timeline
                </h3>
                <div className="grid grid-cols-2 gap-4 text-sm">
                  {vulnerability.publishedDate && (
                    <div>
                      <span className="text-muted-foreground">Published: </span>
                      <span>
                        {new Date(vulnerability.publishedDate).toLocaleDateString()}
                      </span>
                    </div>
                  )}
                  {vulnerability.lastModifiedDate && (
                    <div>
                      <span className="text-muted-foreground">Last Modified: </span>
                      <span>
                        {new Date(vulnerability.lastModifiedDate).toLocaleDateString()}
                      </span>
                    </div>
                  )}
                </div>
              </div>
            )}

            {/* Affected Images */}
            <div className="space-y-2">
              <h3 className="text-sm font-semibold flex items-center gap-2">
                <IconHash className="h-4 w-4" />
                Affected Images ({trulyAffectedImages.length})
              </h3>
              <div className="space-y-2 max-h-40 overflow-y-auto">
                {trulyAffectedImages.length > 0 ? (
                  trulyAffectedImages.map((image) => (
                    <div
                      key={`${image.imageId}-${image.imageName}`}
                      className="flex items-center justify-between p-2 rounded-md bg-muted/50"
                    >
                      <span className="font-mono text-sm">{image.imageName}</span>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => {
                          window.open(`/image/${encodeURIComponent(image.imageName)}`, "_blank");
                        }}
                      >
                        View Details
                        <IconExternalLink className="ml-1 h-3 w-3" />
                      </Button>
                    </div>
                  ))
                ) : (
                  <p className="text-sm text-muted-foreground">
                    No images affected (all marked as false positives)
                  </p>
                )}
              </div>
            </div>

            {/* False Positives */}
            {vulnerability.falsePositiveImages.length > 0 && (
              <div className="space-y-2">
                <h3 className="text-sm font-semibold flex items-center gap-2">
                  <IconX className="h-4 w-4" />
                  False Positives ({vulnerability.falsePositiveImages.length})
                </h3>
                <div className="flex gap-2 flex-wrap">
                  {vulnerability.falsePositiveImages.map((imageName) => (
                    <Badge
                      key={imageName}
                      variant="secondary"
                      className="text-xs"
                    >
                      <IconCheck className="w-3 h-3 mr-1" />
                      {imageName}
                    </Badge>
                  ))}
                </div>
              </div>
            )}

            <Separator />

            {/* References */}
            {vulnerability.references && vulnerability.references.length > 0 && (
              <div className="space-y-3">
                <h3 className="text-sm font-semibold flex items-center gap-2">
                  <IconExternalLink className="h-4 w-4" />
                  References & Resources ({vulnerability.references.length})
                </h3>
                <div className="space-y-2">
                  {vulnerability.references.map((ref, index) => {
                    // Extract domain name for display
                    let displayName = ref;
                    try {
                      const url = new URL(ref);
                      displayName = url.hostname.replace('www.', '');
                      
                      // Add path context for certain domains
                      if (url.pathname && url.pathname !== '/') {
                        const pathParts = url.pathname.split('/').filter(p => p);
                        if (pathParts.length > 0) {
                          // For GitHub, show repo/issue info
                          if (displayName.includes('github.com') && pathParts.length >= 2) {
                            displayName = `GitHub - ${pathParts[0]}/${pathParts[1]}`;
                            if (pathParts[2] === 'issues' && pathParts[3]) {
                              displayName += ` #${pathParts[3]}`;
                            }
                          }
                          // For NVD, show CVE ID
                          else if (displayName.includes('nvd.nist.gov')) {
                            displayName = 'NVD - National Vulnerability Database';
                          }
                          // For Mitre, show CVE database
                          else if (displayName.includes('cve.mitre.org')) {
                            displayName = 'MITRE CVE Dictionary';
                          }
                          // For Red Hat
                          else if (displayName.includes('redhat.com')) {
                            displayName = 'Red Hat Security Advisory';
                          }
                        }
                      }
                    } catch (e) {
                      // If URL parsing fails, use the original reference
                    }
                    
                    return (
                      <div key={index} className="flex items-center gap-2 group">
                        <IconExternalLink className="h-3 w-3 text-muted-foreground flex-shrink-0" />
                        <a
                          href={ref}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="text-sm text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 hover:underline truncate max-w-full"
                          onClick={(e) => e.stopPropagation()}
                        >
                          {displayName}
                        </a>
                        <Button
                          variant="ghost"
                          size="icon"
                          className="h-6 w-6 opacity-0 group-hover:opacity-100 transition-opacity"
                          onClick={(e) => {
                            e.stopPropagation();
                            copyToClipboard(ref);
                          }}
                        >
                          <IconCopy className="h-3 w-3" />
                        </Button>
                      </div>
                    );
                  })}
                </div>
                <div className="pt-2 border-t">
                  <div className="flex items-center gap-2 text-xs text-muted-foreground">
                    <VulnerabilityUrlMenu
                      vulnerabilityId={vulnerability.cveId}
                      references={vulnerability.references}
                    />
                    <span>Quick access to all vulnerability databases</span>
                  </div>
                </div>
              </div>
            )}
          </div>
        </ScrollArea>
      </DialogContent>
    </Dialog>
  );
}