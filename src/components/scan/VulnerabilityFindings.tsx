'use client';

import { useState, useEffect } from 'react';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { InfoIcon, Shield, AlertTriangle, AlertCircle, Info } from 'lucide-react';

interface VulnerabilityFinding {
  id: string;
  cveId: string;
  packageName: string;
  installedVersion?: string;
  fixedVersion?: string;
  severity: string;
  cvssScore?: number;
  source: string;
  title?: string;
  description?: string;
  vulnerabilityUrl?: string;
}

interface GroupedVulnerability {
  cveId: string;
  sources: string[];
  sourceCount: number;
  confidenceScore: number;
  severity: string;
  findings: VulnerabilityFinding[];
}

interface VulnerabilityFindingsProps {
  scanId: string;
}

export function VulnerabilityFindings({ scanId }: VulnerabilityFindingsProps) {
  const [findings, setFindings] = useState<VulnerabilityFinding[]>([]);
  const [groupedFindings, setGroupedFindings] = useState<GroupedVulnerability[]>([]);
  const [loading, setLoading] = useState(true);
  const [view, setView] = useState<'grouped' | 'all'>('grouped');
  const [sourceCounts, setSourceCounts] = useState<Record<string, number>>({});
  const [severityCounts, setSeverityCounts] = useState<Record<string, number>>({});

  useEffect(() => {
    fetchFindings();
  }, [scanId, view]);

  const fetchFindings = async () => {
    setLoading(true);
    try {
      const response = await fetch(
        `/api/scans/${scanId}/findings/vulnerabilities?grouped=${view === 'grouped'}`
      );
      const data = await response.json();
      
      if (view === 'grouped') {
        setGroupedFindings(data.vulnerabilities);
      } else {
        setFindings(data.vulnerabilities);
        // Convert counts to objects
        const sources: Record<string, number> = {};
        const severities: Record<string, number> = {};
        
        data.sourceCounts?.forEach((s: any) => {
          sources[s.source] = s.count;
        });
        
        data.severityCounts?.forEach((s: any) => {
          severities[s.severity] = s.count;
        });
        
        setSourceCounts(sources);
        setSeverityCounts(severities);
      }
    } catch (error) {
      console.error('Failed to fetch vulnerability findings:', error);
    } finally {
      setLoading(false);
    }
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case 'CRITICAL':
        return <AlertCircle className="h-4 w-4 text-red-500" />;
      case 'HIGH':
        return <AlertTriangle className="h-4 w-4 text-orange-500" />;
      case 'MEDIUM':
        return <Shield className="h-4 w-4 text-yellow-500" />;
      case 'LOW':
        return <Info className="h-4 w-4 text-blue-500" />;
      default:
        return <InfoIcon className="h-4 w-4 text-gray-500" />;
    }
  };

  const getSeverityBadgeColor = (severity: string) => {
    switch (severity) {
      case 'CRITICAL':
        return 'bg-red-500';
      case 'HIGH':
        return 'bg-orange-500';
      case 'MEDIUM':
        return 'bg-yellow-500';
      case 'LOW':
        return 'bg-blue-500';
      default:
        return 'bg-gray-500';
    }
  };

  const getSourceBadgeColor = (source: string) => {
    switch (source) {
      case 'trivy':
        return 'bg-blue-600';
      case 'grype':
        return 'bg-purple-600';
      case 'osv':
        return 'bg-green-600';
      default:
        return 'bg-gray-600';
    }
  };

  if (loading) {
    return <div className="p-4">Loading vulnerability findings...</div>;
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center justify-between">
          <span>Vulnerability Findings</span>
          <div className="flex gap-2">
            <Tabs value={view} onValueChange={(v) => setView(v as 'grouped' | 'all')}>
              <TabsList>
                <TabsTrigger value="grouped">Grouped</TabsTrigger>
                <TabsTrigger value="all">All Sources</TabsTrigger>
              </TabsList>
            </Tabs>
          </div>
        </CardTitle>
      </CardHeader>
      <CardContent>
        {view === 'grouped' ? (
          <div className="space-y-4">
            {/* Summary stats for grouped view */}
            <div className="grid grid-cols-4 gap-4 mb-6">
              <Card>
                <CardContent className="p-4">
                  <div className="text-2xl font-bold">{groupedFindings.length}</div>
                  <p className="text-sm text-muted-foreground">Unique CVEs</p>
                </CardContent>
              </Card>
              <Card>
                <CardContent className="p-4">
                  <div className="text-2xl font-bold">
                    {groupedFindings.filter(g => g.sourceCount >= 2).length}
                  </div>
                  <p className="text-sm text-muted-foreground">Multi-source Confirmed</p>
                </CardContent>
              </Card>
              <Card>
                <CardContent className="p-4">
                  <div className="text-2xl font-bold">
                    {groupedFindings.filter(g => g.severity === 'CRITICAL').length}
                  </div>
                  <p className="text-sm text-muted-foreground">Critical</p>
                </CardContent>
              </Card>
              <Card>
                <CardContent className="p-4">
                  <div className="text-2xl font-bold">
                    {groupedFindings.filter(g => g.severity === 'HIGH').length}
                  </div>
                  <p className="text-sm text-muted-foreground">High</p>
                </CardContent>
              </Card>
            </div>

            {/* Grouped findings list */}
            {groupedFindings.map((group) => (
              <Card key={group.cveId} className="border-l-4" style={{
                borderLeftColor: group.sourceCount >= 3 ? '#ef4444' : 
                                group.sourceCount === 2 ? '#f97316' : '#6b7280'
              }}>
                <CardContent className="p-4">
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <div className="flex items-center gap-2 mb-2">
                        {getSeverityIcon(group.severity)}
                        <a 
                          href={`https://nvd.nist.gov/vuln/detail/${group.cveId}`}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="font-mono text-sm font-semibold hover:underline"
                        >
                          {group.cveId}
                        </a>
                        <Badge className={getSeverityBadgeColor(group.severity)}>
                          {group.severity}
                        </Badge>
                        {group.sourceCount >= 2 && (
                          <Badge variant="outline" className="border-green-500 text-green-700">
                            ✓ {group.sourceCount} sources
                          </Badge>
                        )}
                      </div>
                      
                      {/* Package and version info from first finding */}
                      {group.findings[0] && (
                        <div className="mb-2">
                          <span className="text-sm text-muted-foreground">Package: </span>
                          <span className="font-mono text-sm">{group.findings[0].packageName}</span>
                          {group.findings[0].installedVersion && (
                            <>
                              <span className="text-sm text-muted-foreground"> @ </span>
                              <span className="font-mono text-sm">{group.findings[0].installedVersion}</span>
                            </>
                          )}
                          {group.findings[0].fixedVersion && (
                            <>
                              <span className="text-sm text-muted-foreground"> → </span>
                              <span className="font-mono text-sm text-green-600">
                                {group.findings[0].fixedVersion}
                              </span>
                            </>
                          )}
                        </div>
                      )}
                      
                      {/* Sources */}
                      <div className="flex items-center gap-2">
                        <span className="text-sm text-muted-foreground">Found by:</span>
                        {group.sources.map((source) => (
                          <Badge key={source} className={getSourceBadgeColor(source)} variant="secondary">
                            {source}
                          </Badge>
                        ))}
                        <span className="text-sm text-muted-foreground">
                          ({Math.round(group.confidenceScore * 100)}% confidence)
                        </span>
                      </div>
                      
                      {/* Title/Description from findings */}
                      {group.findings[0]?.title && (
                        <div className="mt-2">
                          <p className="text-sm font-medium">{group.findings[0].title}</p>
                        </div>
                      )}
                    </div>
                    
                    {/* CVSS Score */}
                    {group.findings[0]?.cvssScore && (
                      <div className="text-right">
                        <div className="text-sm text-muted-foreground">CVSS</div>
                        <div className="text-lg font-bold">{group.findings[0].cvssScore.toFixed(1)}</div>
                      </div>
                    )}
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        ) : (
          <div className="space-y-4">
            {/* Summary stats for all sources view */}
            <div className="grid grid-cols-3 gap-4 mb-6">
              {Object.entries(sourceCounts).map(([source, count]) => (
                <Card key={source}>
                  <CardContent className="p-4">
                    <Badge className={getSourceBadgeColor(source)} variant="secondary">
                      {source}
                    </Badge>
                    <div className="text-2xl font-bold mt-2">{count}</div>
                    <p className="text-sm text-muted-foreground">findings</p>
                  </CardContent>
                </Card>
              ))}
            </div>

            {/* Severity breakdown */}
            <div className="flex gap-2 mb-4">
              {Object.entries(severityCounts).map(([severity, count]) => (
                <Badge key={severity} className={getSeverityBadgeColor(severity)} variant="secondary">
                  {severity}: {count}
                </Badge>
              ))}
            </div>

            {/* All findings list */}
            <div className="space-y-2">
              {findings.map((finding) => (
                <div key={finding.id} className="flex items-center justify-between p-3 border rounded-lg">
                  <div className="flex items-center gap-3">
                    {getSeverityIcon(finding.severity)}
                    <div>
                      <div className="flex items-center gap-2">
                        <span className="font-mono text-sm">{finding.cveId}</span>
                        <Badge className={getSourceBadgeColor(finding.source)} variant="outline">
                          {finding.source}
                        </Badge>
                      </div>
                      <div className="text-sm text-muted-foreground">
                        {finding.packageName}
                        {finding.installedVersion && ` @ ${finding.installedVersion}`}
                      </div>
                    </div>
                  </div>
                  {finding.cvssScore && (
                    <div className="text-sm">
                      CVSS: {finding.cvssScore.toFixed(1)}
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
}