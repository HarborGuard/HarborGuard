import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { z } from 'zod';

const CveClassificationSchema = z.object({
  cveId: z.string().min(1, 'CVE ID is required'),
  packageName: z.string().min(1, 'Package name is required'),
  isFalsePositive: z.boolean().optional().default(false),
  comment: z.string().optional(),
  createdBy: z.string().optional(),
});

interface RouteParams {
  params: Promise<{ id: string }>;
}

/**
 * Get CVE classifications for a specific scan using normalized data
 */
export async function GET(
  request: NextRequest,
  { params }: RouteParams
) {
  try {
    const { id: scanId } = await params;

    // Get the scan with its image
    const scan = await prisma.scan.findUnique({
      where: { id: scanId },
      include: { image: true }
    });

    if (!scan) {
      return NextResponse.json(
        { error: 'Scan not found' },
        { status: 404 }
      );
    }

    // Get classifications for the image
    const classifications = await prisma.cveClassification.findMany({
      where: {
        imageId: scan.imageId,
      },
      orderBy: {
        createdAt: 'desc',
      },
    });

    return NextResponse.json(classifications);
  } catch (error) {
    console.error('Error fetching CVE classifications:', error);
    return NextResponse.json(
      { error: 'Failed to fetch CVE classifications' },
      { status: 500 }
    );
  }
}

/**
 * Create or update a CVE classification for normalized scan data
 */
export async function POST(
  request: NextRequest,
  { params }: RouteParams
) {
  try {
    const { id: scanId } = await params;
    const body = await request.json();

    const validatedData = CveClassificationSchema.parse(body);

    // Get the scan with its image
    const scan = await prisma.scan.findUnique({
      where: { id: scanId },
      include: { image: true }
    });

    if (!scan) {
      return NextResponse.json(
        { error: 'Scan not found' },
        { status: 404 }
      );
    }

    // For normalized data, we create a simplified classification
    // First check if a vulnerability record exists
    let vulnerability = await prisma.vulnerability.findUnique({
      where: { cveId: validatedData.cveId }
    });

    // If it doesn't exist, create it (for normalized data compatibility)
    if (!vulnerability) {
      // Try to find the actual severity from the scan findings
      const vulnFinding = await prisma.scanVulnerabilityFinding.findFirst({
        where: {
          scanId,
          cveId: validatedData.cveId,
          packageName: validatedData.packageName,
        },
        select: { severity: true }
      });
      
      vulnerability = await prisma.vulnerability.create({
        data: {
          cveId: validatedData.cveId,
          severity: vulnFinding?.severity || 'INFO', // Use actual severity or INFO as default
        }
      });
    }

    // Check if an imageVulnerability record exists
    let imageVulnerability = await prisma.imageVulnerability.findFirst({
      where: {
        imageId: scan.imageId,
        vulnerabilityId: vulnerability.id,
        packageName: validatedData.packageName,
      }
    });

    // If it doesn't exist, create it for compatibility
    if (!imageVulnerability) {
      // Try to get version info from scan findings
      const vulnFinding = await prisma.scanVulnerabilityFinding.findFirst({
        where: {
          scanId,
          cveId: validatedData.cveId,
          packageName: validatedData.packageName,
        },
        select: { 
          installedVersion: true,
          fixedVersion: true
        }
      });
      
      imageVulnerability = await prisma.imageVulnerability.create({
        data: {
          imageId: scan.imageId,
          vulnerabilityId: vulnerability.id,
          packageName: validatedData.packageName,
          installedVersion: vulnFinding?.installedVersion || '',
          fixedVersion: vulnFinding?.fixedVersion || null,
        }
      });
    }

    // Check if classification already exists
    const existingClassification = await prisma.cveClassification.findFirst({
      where: {
        imageId: scan.imageId,
        imageVulnerabilityId: imageVulnerability.id,
      }
    });

    let classification;
    if (existingClassification) {
      // Update existing classification
      classification = await prisma.cveClassification.update({
        where: { id: existingClassification.id },
        data: {
          isFalsePositive: validatedData.isFalsePositive,
          comment: validatedData.comment,
          updatedAt: new Date(),
        }
      });
    } else {
      // Create new classification
      classification = await prisma.cveClassification.create({
        data: {
          imageId: scan.imageId,
          imageVulnerabilityId: imageVulnerability.id,
          isFalsePositive: validatedData.isFalsePositive ?? false,
          comment: validatedData.comment,
          createdBy: validatedData.createdBy || 'system',
        }
      });
    }

    // Log the action
    console.log(
      `CVE classification ${existingClassification ? 'updated' : 'created'} for ${validatedData.cveId} in scan ${scanId}`
    );

    return NextResponse.json(classification);
  } catch (error) {
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: 'Invalid input', details: error.issues },
        { status: 400 }
      );
    }

    console.error('Error creating/updating CVE classification:', error);
    const errorMessage = error instanceof Error ? error.message : 'Unknown error';
    return NextResponse.json(
      { error: 'Failed to save CVE classification', details: errorMessage },
      { status: 500 }
    );
  }
}

/**
 * Delete a CVE classification
 */
export async function DELETE(
  request: NextRequest,
  { params }: RouteParams
) {
  try {
    const { id: scanId } = await params;
    const { searchParams } = new URL(request.url);
    const cveId = searchParams.get('cveId');

    if (!cveId) {
      return NextResponse.json(
        { error: 'CVE ID is required' },
        { status: 400 }
      );
    }

    // Get the scan
    const scan = await prisma.scan.findUnique({
      where: { id: scanId },
    });

    if (!scan) {
      return NextResponse.json(
        { error: 'Scan not found' },
        { status: 404 }
      );
    }

    // Find the vulnerability
    const vulnerability = await prisma.vulnerability.findUnique({
      where: { cveId }
    });

    if (!vulnerability) {
      return NextResponse.json(
        { error: 'Vulnerability not found' },
        { status: 404 }
      );
    }

    // Find the imageVulnerability
    const imageVulnerability = await prisma.imageVulnerability.findFirst({
      where: {
        imageId: scan.imageId,
        vulnerabilityId: vulnerability.id,
      }
    });

    if (!imageVulnerability) {
      return NextResponse.json(
        { error: 'Image vulnerability not found' },
        { status: 404 }
      );
    }

    // Delete the classification
    const result = await prisma.cveClassification.deleteMany({
      where: {
        imageId: scan.imageId,
        imageVulnerabilityId: imageVulnerability.id,
      }
    });

    if (result.count === 0) {
      return NextResponse.json(
        { error: 'Classification not found' },
        { status: 404 }
      );
    }

    console.log(`CVE classification deleted for ${cveId} in scan ${scanId}`);

    return NextResponse.json({ success: true });
  } catch (error) {
    console.error('Error deleting CVE classification:', error);
    return NextResponse.json(
      { error: 'Failed to delete CVE classification' },
      { status: 500 }
    );
  }
}