import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { z } from 'zod';
import { auditLogger } from '@/lib/audit-logger';
import { recalculateImageRiskScores } from '@/lib/scan-aggregations';

const CveClassificationSchema = z.object({
  cveId: z.string().min(1, 'CVE ID is required'),
  isFalsePositive: z.boolean().optional().default(false),
  comment: z.string().optional(),
  createdBy: z.string().optional(),
});

interface RouteParams {
  params: Promise<{ id: string }>;
}

export async function GET(
  request: NextRequest,
  { params }: RouteParams
) {
  try {
    const { id: imageId } = await params;

    const classifications = await prisma.cveClassification.findMany({
      where: {
        imageId,
      },
      orderBy: {
        createdAt: 'desc',
      },
    });

    return NextResponse.json(classifications);
  } catch (error) {
    console.error('Error fetching CVE classifications:', error);
    return NextResponse.json(
      { error: 'Failed to fetch CVE classifications' },
      { status: 500 }
    );
  }
}

export async function POST(
  request: NextRequest,
  { params }: RouteParams
) {
  try {
    const { id: imageId } = await params;
    const body = await request.json();

    const validatedData = CveClassificationSchema.parse(body);

    // Check if image exists
    const image = await prisma.image.findUnique({
      where: { id: imageId },
    });

    if (!image) {
      return NextResponse.json(
        { error: 'Image not found' },
        { status: 404 }
      );
    }

    // Upsert the classification (create or update if exists)
    const classification = await prisma.cveClassification.upsert({
      where: {
        cveId_imageId: {
          cveId: validatedData.cveId,
          imageId,
        },
      },
      update: {
        isFalsePositive: validatedData.isFalsePositive,
        comment: validatedData.comment,
        createdBy: validatedData.createdBy,
        updatedAt: new Date(),
      },
      create: {
        cveId: validatedData.cveId,
        imageId,
        isFalsePositive: validatedData.isFalsePositive,
        comment: validatedData.comment,
        createdBy: validatedData.createdBy,
      },
    });

    // Log the CVE classification action
    await auditLogger.cveClassification(
      request,
      validatedData.cveId,
      image.name,
      validatedData.isFalsePositive,
      validatedData.comment
    );

    // Recalculate risk scores for all scans of this image
    try {
      await recalculateImageRiskScores(imageId);
    } catch (error) {
      console.error('Failed to recalculate risk scores after CVE classification:', error);
      // Don't fail the request if risk score calculation fails
    }

    return NextResponse.json(classification, { status: 201 });
  } catch (error) {
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: 'Invalid request data', details: error.issues },
        { status: 400 }
      );
    }

    console.error('Error creating CVE classification:', error);
    return NextResponse.json(
      { error: 'Failed to create CVE classification' },
      { status: 500 }
    );
  }
}