import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { z } from 'zod';

const UpdateCveClassificationSchema = z.object({
  isFalsePositive: z.boolean().optional(),
  comment: z.string().optional(),
  createdBy: z.string().optional(),
});

export async function GET(
  request: NextRequest,
  { params }: { params: { id: string; cveId: string } }
) {
  try {
    const { id: imageId, cveId } = params;

    const classification = await prisma.cveClassification.findUnique({
      where: {
        cveId_imageId: {
          cveId: decodeURIComponent(cveId),
          imageId,
        },
      },
    });

    if (!classification) {
      return NextResponse.json(
        { error: 'CVE classification not found' },
        { status: 404 }
      );
    }

    return NextResponse.json(classification);
  } catch (error) {
    console.error('Error fetching CVE classification:', error);
    return NextResponse.json(
      { error: 'Failed to fetch CVE classification' },
      { status: 500 }
    );
  }
}

export async function PUT(
  request: NextRequest,
  { params }: { params: { id: string; cveId: string } }
) {
  try {
    const { id: imageId, cveId } = params;
    const body = await request.json();

    const validatedData = UpdateCveClassificationSchema.parse(body);

    const classification = await prisma.cveClassification.update({
      where: {
        cveId_imageId: {
          cveId: decodeURIComponent(cveId),
          imageId,
        },
      },
      data: {
        ...validatedData,
        updatedAt: new Date(),
      },
    });

    return NextResponse.json(classification);
  } catch (error) {
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: 'Invalid request data', details: error.issues },
        { status: 400 }
      );
    }

    console.error('Error updating CVE classification:', error);
    return NextResponse.json(
      { error: 'Failed to update CVE classification' },
      { status: 500 }
    );
  }
}

export async function DELETE(
  request: NextRequest,
  { params }: { params: { id: string; cveId: string } }
) {
  try {
    const { id: imageId, cveId } = params;

    await prisma.cveClassification.delete({
      where: {
        cveId_imageId: {
          cveId: decodeURIComponent(cveId),
          imageId,
        },
      },
    });

    return NextResponse.json({ success: true });
  } catch (error) {
    console.error('Error deleting CVE classification:', error);
    return NextResponse.json(
      { error: 'Failed to delete CVE classification' },
      { status: 500 }
    );
  }
}