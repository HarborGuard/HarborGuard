import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { z } from 'zod';
import { recalculateImageRiskScores } from '@/lib/scan-aggregations-server';

const UpdateCveClassificationSchema = z.object({
  isFalsePositive: z.boolean().optional(),
  comment: z.string().nullable().optional(),
  createdBy: z.string().nullable().optional(),
});

interface RouteParams {
  params: Promise<{ id: string; cveId: string }>;
}

export async function GET(
  request: NextRequest,
  { params }: RouteParams
) {
  try {
    const { id: imageId, cveId } = await params;
    const decodedCveId = decodeURIComponent(cveId);

    // First find the vulnerability by CVE ID
    const vulnerability = await prisma.vulnerability.findUnique({
      where: { cveId: decodedCveId }
    });

    if (!vulnerability) {
      return NextResponse.json(
        { error: 'Vulnerability not found' },
        { status: 404 }
      );
    }

    // Then find the image vulnerability
    const imageVulnerability = await prisma.imageVulnerability.findFirst({
      where: {
        imageId,
        vulnerabilityId: vulnerability.id,
      }
    });

    if (!imageVulnerability) {
      return NextResponse.json(
        { error: 'Image vulnerability not found' },
        { status: 404 }
      );
    }

    // Finally find the classification
    const classification = await prisma.cveClassification.findFirst({
      where: {
        imageVulnerabilityId: imageVulnerability.id,
        imageId,
      },
      include: {
        imageVulnerability: {
          include: {
            vulnerability: true
          }
        }
      }
    });

    if (!classification) {
      return NextResponse.json(
        { error: 'CVE classification not found' },
        { status: 404 }
      );
    }

    return NextResponse.json(classification);
  } catch (error) {
    console.error('Error fetching CVE classification:', error);
    return NextResponse.json(
      { error: 'Failed to fetch CVE classification' },
      { status: 500 }
    );
  }
}

export async function PUT(
  request: NextRequest,
  { params }: RouteParams
) {
  try {
    const { id: imageId, cveId } = await params;
    const body = await request.json();
    const decodedCveId = decodeURIComponent(cveId);

    const validatedData = UpdateCveClassificationSchema.parse(body);

    // First find the vulnerability and image vulnerability
    const vulnerability = await prisma.vulnerability.findUnique({
      where: { cveId: decodedCveId }
    });

    if (!vulnerability) {
      return NextResponse.json(
        { error: 'Vulnerability not found' },
        { status: 404 }
      );
    }

    const imageVulnerability = await prisma.imageVulnerability.findFirst({
      where: {
        imageId,
        vulnerabilityId: vulnerability.id,
      }
    });

    if (!imageVulnerability) {
      return NextResponse.json(
        { error: 'Image vulnerability not found' },
        { status: 404 }
      );
    }

    // Find existing classification
    const existingClassification = await prisma.cveClassification.findFirst({
      where: {
        imageVulnerabilityId: imageVulnerability.id,
        imageId,
      }
    });

    if (!existingClassification) {
      return NextResponse.json(
        { error: 'CVE classification not found' },
        { status: 404 }
      );
    }

    // Update the classification
    const classification = await prisma.cveClassification.update({
      where: {
        id: existingClassification.id,
      },
      data: {
        ...validatedData,
        updatedAt: new Date(),
      },
    });

    // Recalculate risk scores for all scans of this image
    try {
      await recalculateImageRiskScores(imageId);
    } catch (error) {
      console.error('Failed to recalculate risk scores after CVE classification update:', error);
      // Don't fail the request if risk score calculation fails
    }

    return NextResponse.json(classification);
  } catch (error) {
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: 'Invalid request data', details: error.issues },
        { status: 400 }
      );
    }

    console.error('Error updating CVE classification:', error);
    return NextResponse.json(
      { error: 'Failed to update CVE classification' },
      { status: 500 }
    );
  }
}

export async function DELETE(
  request: NextRequest,
  { params }: RouteParams
) {
  try {
    const { id: imageId, cveId } = await params;
    const decodedCveId = decodeURIComponent(cveId);

    // First find the vulnerability and image vulnerability
    const vulnerability = await prisma.vulnerability.findUnique({
      where: { cveId: decodedCveId }
    });

    if (!vulnerability) {
      return NextResponse.json(
        { error: 'Vulnerability not found' },
        { status: 404 }
      );
    }

    const imageVulnerability = await prisma.imageVulnerability.findFirst({
      where: {
        imageId,
        vulnerabilityId: vulnerability.id,
      }
    });

    if (!imageVulnerability) {
      return NextResponse.json(
        { error: 'Image vulnerability not found' },
        { status: 404 }
      );
    }

    // Find and delete the classification
    const existingClassification = await prisma.cveClassification.findFirst({
      where: {
        imageVulnerabilityId: imageVulnerability.id,
        imageId,
      }
    });

    if (!existingClassification) {
      return NextResponse.json(
        { error: 'CVE classification not found' },
        { status: 404 }
      );
    }

    await prisma.cveClassification.delete({
      where: {
        id: existingClassification.id,
      },
    });

    // Recalculate risk scores for all scans of this image
    try {
      await recalculateImageRiskScores(imageId);
    } catch (error) {
      console.error('Failed to recalculate risk scores after CVE classification deletion:', error);
      // Don't fail the request if risk score calculation fails
    }

    return NextResponse.json({ success: true });
  } catch (error) {
    console.error('Error deleting CVE classification:', error);
    return NextResponse.json(
      { error: 'Failed to delete CVE classification' },
      { status: 500 }
    );
  }
}