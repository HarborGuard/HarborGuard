import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { z } from 'zod';
import { auditLogger } from '@/lib/audit-logger';
import { recalculateImageRiskScores } from '@/lib/scan-aggregations';

const CveClassificationSchema = z.object({
  cveId: z.string().min(1, 'CVE ID is required'),
  isFalsePositive: z.boolean().optional().default(false),
  comment: z.string().optional(),
  createdBy: z.string().optional(),
});

interface RouteParams {
  params: Promise<{ name: string }>;
}

export async function GET(
  request: NextRequest,
  { params }: RouteParams
) {
  try {
    const { name: imageName } = await params;

    // Get all images with this name (all tags)
    const images = await prisma.image.findMany({
      where: {
        name: imageName,
      },
    });

    if (images.length === 0) {
      return NextResponse.json([]);
    }

    // Get classifications for all imageIds and consolidate by CVE ID
    const imageIds = images.map(img => img.id);
    const allClassifications = await prisma.cveClassification.findMany({
      where: {
        imageId: {
          in: imageIds,
        },
      },
      orderBy: {
        createdAt: 'desc',
      },
    });

    // Consolidate by CVE ID (latest classification wins)
    const consolidatedMap = new Map();
    allClassifications.forEach(classification => {
      const existing = consolidatedMap.get(classification.cveId);
      if (!existing || new Date(classification.updatedAt) > new Date(existing.updatedAt)) {
        consolidatedMap.set(classification.cveId, classification);
      }
    });

    const consolidated = Array.from(consolidatedMap.values());
    return NextResponse.json(consolidated);
  } catch (error) {
    console.error('Error fetching CVE classifications for image name:', error);
    return NextResponse.json(
      { error: 'Failed to fetch CVE classifications' },
      { status: 500 }
    );
  }
}

export async function POST(
  request: NextRequest,
  { params }: RouteParams
) {
  try {
    const { name: imageName } = await params;
    const body = await request.json();

    const validatedData = CveClassificationSchema.parse(body);

    // Get all images with this name (all tags)
    const images = await prisma.image.findMany({
      where: {
        name: imageName,
      },
    });

    if (images.length === 0) {
      return NextResponse.json(
        { error: 'No images found with this name' },
        { status: 404 }
      );
    }

    // Save classification to ALL images with this name
    const classifications = [];
    for (const image of images) {
      const classification = await prisma.cveClassification.upsert({
        where: {
          cveId_imageId: {
            cveId: validatedData.cveId,
            imageId: image.id,
          },
        },
        update: {
          isFalsePositive: validatedData.isFalsePositive,
          comment: validatedData.comment,
          createdBy: validatedData.createdBy,
          updatedAt: new Date(),
        },
        create: {
          cveId: validatedData.cveId,
          imageId: image.id,
          isFalsePositive: validatedData.isFalsePositive,
          comment: validatedData.comment,
          createdBy: validatedData.createdBy,
        },
      });
      classifications.push(classification);
    }

    // Log the CVE classification action
    await auditLogger.cveClassification(
      request,
      validatedData.cveId,
      imageName,
      validatedData.isFalsePositive,
      validatedData.comment
    );

    // Recalculate risk scores for all scans of all images with this name
    for (const image of images) {
      try {
        await recalculateImageRiskScores(image.id);
      } catch (error) {
        console.error(`Failed to recalculate risk scores for image ${image.id}:`, error);
        // Don't fail the request if risk score calculation fails
      }
    }

    return NextResponse.json(classifications[0], { status: 201 });
  } catch (error) {
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: 'Invalid request data', details: error.issues },
        { status: 400 }
      );
    }

    console.error('Error creating CVE classification for image name:', error);
    return NextResponse.json(
      { error: 'Failed to create CVE classification' },
      { status: 500 }
    );
  }
}