generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "debian-openssl-3.0.x", "debian-openssl-1.1.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Image {
  id                 String              @id @default(cuid())
  name               String
  tag                String
  registry           String?
  digest             String              @unique
  platform           String?
  sizeBytes          BigInt?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  bulkScanItems      BulkScanItem[]
  cveClassifications CveClassification[]
  scans              Scan[]

  @@index([name, tag])
  @@index([registry, name, tag])
  @@index([digest])
  @@map("images")
}

model Scan {
  id                  String                   @id @default(cuid())
  requestId           String                   @unique
  imageId             String
  startedAt           DateTime
  finishedAt          DateTime?
  sizeBytes           BigInt?
  status              ScanStatus               @default(RUNNING)
  trivy               Json?
  grype               Json?
  syft                Json?
  dockle              Json?
  metadata            Json?
  reportsDir          String?
  scannerVersions     Json?
  scanConfig          Json?
  errorMessage        String?
  vulnerabilityCount  Json?
  riskScore           Int?
  complianceScore     Json?
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt
  osv                 Json?
  dive                Json?
  source              String?
  bulkScanItems       BulkScanItem[]
  image               Image                    @relation(fields: [imageId], references: [id], onDelete: Cascade)
  scheduledExecutions ScheduledScanExecution[]

  @@index([requestId])
  @@index([status])
  @@index([startedAt])
  @@index([imageId])
  @@map("scans")
}

model ScanSchedule {
  id             String                   @id @default(cuid())
  name           String
  cronExpression String
  scanRequest    Json
  isActive       Boolean                  @default(true)
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @updatedAt
  lastRunAt      DateTime?
  nextRunAt      DateTime?
  createdBy      String?
  executions     ScheduledScanExecution[]

  @@index([isActive])
  @@index([nextRunAt])
  @@map("scan_schedules")
}

model ScheduledScanExecution {
  id            String       @id @default(cuid())
  scheduleId    String
  scanId        String?
  executionTime DateTime     @default(now())
  status        String
  errorMessage  String?
  scan          Scan?        @relation(fields: [scanId], references: [id])
  schedule      ScanSchedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  @@index([scheduleId])
  @@index([executionTime])
  @@map("scheduled_scan_executions")
}

model ScanTemplate {
  id                 String   @id @default(cuid())
  name               String
  description        String?
  environment        String
  scannerConfig      Json
  policyConfig       Json?
  notificationConfig Json?
  isDefault          Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  createdBy          String?

  @@index([environment])
  @@index([isDefault])
  @@map("scan_templates")
}

model BulkScanBatch {
  id           String         @id @default(cuid())
  totalImages  Int
  status       String
  patterns     Json
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  completedAt  DateTime?
  errorMessage String?
  name         String?
  items        BulkScanItem[]

  @@index([status])
  @@index([createdAt])
  @@map("bulk_scan_batches")
}

model BulkScanItem {
  id      String        @id @default(cuid())
  batchId String
  scanId  String
  imageId String
  status  String
  image   Image         @relation(fields: [imageId], references: [id], onDelete: Cascade)
  scan    Scan          @relation(fields: [scanId], references: [id], onDelete: Cascade)
  batch   BulkScanBatch @relation(fields: [batchId], references: [id], onDelete: Cascade)

  @@index([batchId])
  @@index([status])
  @@map("bulk_scan_items")
}

model CveClassification {
  id              String   @id @default(cuid())
  cveId           String
  imageId         String
  isFalsePositive Boolean  @default(false)
  comment         String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdBy       String?
  image           Image    @relation(fields: [imageId], references: [id], onDelete: Cascade)

  @@unique([cveId, imageId])
  @@index([cveId])
  @@index([imageId])
  @@index([isFalsePositive])
  @@map("cve_classifications")
}

model AuditLog {
  id        String   @id @default(cuid())
  eventType String
  category  String
  userIp    String
  userAgent String?
  userId    String?
  resource  String?
  action    String
  details   Json?
  metadata  Json?
  timestamp DateTime @default(now())

  @@index([eventType])
  @@index([category])
  @@index([userIp])
  @@index([timestamp])
  @@index([resource])
  @@map("audit_logs")
}

enum ScanStatus {
  RUNNING
  SUCCESS
  PARTIAL
  FAILED
  CANCELLED
}
