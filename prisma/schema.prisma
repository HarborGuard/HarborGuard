generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "debian-openssl-3.0.x", "debian-openssl-1.1.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Image {
  id                   String               @id @default(cuid())
  name                 String
  tag                  String
  registry             String?
  source               ImageSource          @default(REGISTRY)
  digest               String               @unique
  platform             String?
  sizeBytes            Int?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  bulkScanItems        BulkScanItem[]
  cveClassifications   CveClassification[]
  imageVulnerabilities ImageVulnerability[]
  scans                Scan[]

  @@index([name, tag])
  @@index([registry, name, tag])
  @@index([digest])
  @@index([registry])
  @@index([source])
  @@map("images")
}

model Scan {
  id               String            @id @default(cuid())
  requestId        String            @unique
  imageId          String
  startedAt        DateTime
  finishedAt       DateTime?
  status           ScanStatus        @default(RUNNING)
  reportsDir       String?
  errorMessage     String?
  riskScore        Int?
  metadataId       String?           @unique
  source           String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  bulkScanItems    BulkScanItem[]
  policyViolations PolicyViolation[]
  scanResults      ScanResult[]
  metadata         ScanMetadata?     @relation(fields: [metadataId], references: [id], onDelete: SetNull)
  image            Image             @relation(fields: [imageId], references: [id], onDelete: Cascade)

  @@index([requestId])
  @@index([status])
  @@index([startedAt])
  @@index([imageId])
  @@index([imageId, status])
  @@index([imageId, startedAt])
  @@index([status, startedAt])
  @@index([metadataId])
  @@map("scans")
}

model ScanMetadata {
  id                     String   @id @default(cuid())
  
  // Docker Image metadata
  dockerId               String?
  dockerOs               String?
  dockerArchitecture     String?
  dockerSize             BigInt?
  dockerAuthor           String?
  dockerCreated          DateTime?
  dockerVersion          String?
  dockerParent           String?
  dockerComment          String?
  dockerDigest           String?
  dockerConfig           Json?    // Complex nested object
  dockerRootFS           Json?    // Layers array
  dockerGraphDriver      Json?
  dockerRepoTags         Json?    // Array of strings
  dockerRepoDigests      Json?    // Array of strings
  dockerMetadata         Json?    // Docker-specific metadata
  dockerLabels           Json?    // Label key-value pairs
  dockerEnv              Json?    // Environment variables array
  
  // Scan Results from each scanner
  trivyResults           Json?
  grypeResults           Json?
  syftResults            Json?
  dockleResults          Json?
  osvResults             Json?
  diveResults            Json?
  
  // Aggregated Data
  vulnerabilityCritical  Int      @default(0)
  vulnerabilityHigh      Int      @default(0)
  vulnerabilityMedium    Int      @default(0)
  vulnerabilityLow       Int      @default(0)
  vulnerabilityInfo      Int      @default(0)
  complianceScore        Int?
  complianceGrade        String?
  complianceFatal        Int?
  complianceWarn         Int?
  complianceInfo         Int?
  compliancePass         Int?
  aggregatedRiskScore    Int?
  
  // Scanner versions
  scannerVersions        Json?
  
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  
  scan                   Scan?
  
  @@index([dockerDigest])
  @@index([aggregatedRiskScore])
  @@map("scan_metadata")
}

model ScanResult {
  id           String           @id @default(cuid())
  scanId       String
  scannerId    String
  rawOutput    Json?
  status       ScanResultStatus @default(SUCCESS)
  errorMessage String?
  createdAt    DateTime         @default(now())
  scan         Scan             @relation(fields: [scanId], references: [id], onDelete: Cascade)
  scanner      Scanner          @relation(fields: [scannerId], references: [id])

  @@index([scanId])
  @@index([scannerId])
  @@index([status])
  @@map("scan_results")
}

model Scanner {
  id            String       @id @default(cuid())
  name          String       @unique
  version       String
  type          ScannerType
  isActive      Boolean      @default(true)
  defaultConfig Json?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  scanResults   ScanResult[]

  @@index([name])
  @@index([type])
  @@index([isActive])
  @@map("scanners")
}

model BulkScanBatch {
  id           String         @id @default(cuid())
  totalImages  Int
  status       BatchStatus
  patterns     Json
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  completedAt  DateTime?
  errorMessage String?
  name         String?
  items        BulkScanItem[]

  @@index([status])
  @@index([createdAt])
  @@map("bulk_scan_batches")
}

model BulkScanItem {
  id      String        @id @default(cuid())
  batchId String
  scanId  String
  imageId String
  status  ItemStatus
  batch   BulkScanBatch @relation(fields: [batchId], references: [id], onDelete: Cascade)
  image   Image         @relation(fields: [imageId], references: [id], onDelete: Cascade)
  scan    Scan          @relation(fields: [scanId], references: [id], onDelete: Cascade)

  @@index([batchId])
  @@index([status])
  @@map("bulk_scan_items")
}

model Vulnerability {
  id                   String               @id @default(cuid())
  cveId                String               @unique
  title                String?
  description          String?
  severity             Severity
  cvssScore            Float?
  source               String?
  publishedAt          DateTime?
  modifiedAt           DateTime?
  imageVulnerabilities ImageVulnerability[]

  @@index([cveId])
  @@index([severity])
  @@index([cvssScore])
  @@map("vulnerabilities")
}

model ImageVulnerability {
  id                 String              @id @default(cuid())
  imageId            String
  vulnerabilityId    String
  packageName        String
  installedVersion   String?
  fixedVersion       String?
  status             VulnerabilityStatus @default(DETECTED)
  detectedAt         DateTime            @default(now())
  cveClassifications CveClassification[]
  image              Image               @relation(fields: [imageId], references: [id], onDelete: Cascade)
  vulnerability      Vulnerability       @relation(fields: [vulnerabilityId], references: [id], onDelete: Cascade)

  @@unique([imageId, vulnerabilityId, packageName])
  @@index([imageId])
  @@index([vulnerabilityId])
  @@index([status])
  @@index([packageName])
  @@map("image_vulnerabilities")
}

model CveClassification {
  id                   String             @id @default(cuid())
  imageVulnerabilityId String
  isFalsePositive      Boolean            @default(false)
  comment              String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  createdBy            String?
  imageId              String
  image                Image              @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageVulnerability   ImageVulnerability @relation(fields: [imageVulnerabilityId], references: [id], onDelete: Cascade)

  @@index([imageVulnerabilityId])
  @@index([imageId])
  @@index([isFalsePositive])
  @@map("cve_classifications")
}

model PolicyRule {
  id               String            @id @default(cuid())
  name             String
  description      String?
  category         PolicyCategory
  severity         Severity
  conditions       Json
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  policyViolations PolicyViolation[]

  @@index([category])
  @@index([severity])
  @@index([isActive])
  @@map("policy_rules")
}

model PolicyViolation {
  id           String     @id @default(cuid())
  scanId       String
  policyRuleId String
  description  String?
  severity     Severity
  details      Json?
  detectedAt   DateTime   @default(now())
  policyRule   PolicyRule @relation(fields: [policyRuleId], references: [id], onDelete: Cascade)
  scan         Scan       @relation(fields: [scanId], references: [id], onDelete: Cascade)

  @@index([scanId])
  @@index([policyRuleId])
  @@index([severity])
  @@index([detectedAt])
  @@map("policy_violations")
}

model AuditLog {
  id        String      @id @default(cuid())
  eventType EventType
  category  LogCategory
  userIp    String
  userAgent String?
  userId    String?
  resource  String?
  action    LogAction
  details   Json?
  metadata  Json?
  timestamp DateTime    @default(now())

  @@index([eventType])
  @@index([category])
  @@index([userIp])
  @@index([timestamp])
  @@index([resource])
  @@map("audit_logs")
}

model Repository {
  id                String           @id @default(cuid())
  name              String
  type              RepositoryType
  registryUrl       String
  username          String
  encryptedPassword String
  organization      String?
  status            RepositoryStatus @default(UNTESTED)
  lastTested        DateTime?
  repositoryCount   Int?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@index([type])
  @@index([status])
  @@index([createdAt])
  @@map("repositories")
}

enum RepositoryType {
  DOCKERHUB
  GHCR
  GENERIC
}

enum RepositoryStatus {
  UNTESTED
  ACTIVE
  ERROR
}

enum ScanStatus {
  PENDING
  RUNNING
  SUCCESS
  PARTIAL
  FAILED
  CANCELLED
}

enum ScanResultStatus {
  SUCCESS
  FAILED
  PARTIAL
}

enum ScannerType {
  VULNERABILITY
  COMPLIANCE
  SBOM
  ANALYSIS
}

enum BatchStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum ItemStatus {
  PENDING
  RUNNING
  SUCCESS
  FAILED
  CANCELLED
}

enum Severity {
  CRITICAL
  HIGH
  MEDIUM
  LOW
  INFO
}

enum VulnerabilityStatus {
  DETECTED
  FIXED
  IGNORED
  FALSE_POSITIVE
}

enum ImageSource {
  REGISTRY
  LOCAL_DOCKER
  FILE_UPLOAD
  REGISTRY_PRIVATE
}

enum PolicyCategory {
  SECURITY
  COMPLIANCE
  BEST_PRACTICES
  CUSTOM
}

enum EventType {
  SCAN_START
  SCAN_COMPLETE
  SCAN_FAILED
  IMAGE_ADDED
  IMAGE_REMOVED
  USER_LOGIN
  CONFIG_CHANGE
  SYSTEM_EVENT
}

enum LogCategory {
  SECURITY
  OPERATIONAL
  INFORMATIVE
  ERROR
}

enum LogAction {
  CREATE
  UPDATE
  DELETE
  VIEW
  SCAN
  UPLOAD
  DOWNLOAD
  LOGIN
  LOGOUT
}
