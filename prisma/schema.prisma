// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "debian-openssl-3.0.x", "debian-openssl-1.1.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Image {
  id          String   @id @default(cuid())
  name        String   // e.g. "nginx"
  tag         String   // e.g. "1.27"
  registry    String?  // e.g. "ghcr.io", "docker.io"
  digest      String   @unique // sha256:...
  platform    String?  // e.g. "linux/amd64"
  sizeBytes   BigInt?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  scans       Scan[]
  bulkScanItems BulkScanItem[]

  @@index([name, tag])
  @@index([registry, name, tag])
  @@index([digest])
  @@map("images")
}

model Scan {
  id             String        @id @default(cuid())
  requestId      String        @unique // e.g. "20250813-145041-8b11d0de"
  imageId        String
  image          Image         @relation(fields: [imageId], references: [id], onDelete: Cascade)
  startedAt      DateTime
  finishedAt     DateTime?
  sizeBytes      BigInt?
  status         ScanStatus    @default(RUNNING)
  source         String?       // 'local' or 'registry' to track image source
  
  // Scanner outputs stored as JSON
  trivy          Json?
  grype          Json?
  syft           Json?
  dockle         Json?
  osv            Json?
  dive           Json?         // layer analysis output from `dive`
  metadata       Json?         // output from `skopeo inspect`
  
  // Scan metadata
  reportsDir     String?       // where files were written in the container
  scannerVersions Json?        // versions of tools used
  scanConfig     Json?         // scan parameters/configuration
  errorMessage   String?       // error details if failed
  
  // Computed/aggregated fields for quick access
  vulnerabilityCount Json?     // { "critical": 0, "high": 5, "medium": 10, "low": 20 }
  riskScore          Int?      // computed risk score 0-100
  complianceScore    Json?     // compliance results summary
  
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  
  scheduledExecutions ScheduledScanExecution[]
  bulkScanItems BulkScanItem[]

  @@index([requestId])
  @@index([status])
  @@index([startedAt])
  @@index([imageId])
  @@map("scans")
}

enum ScanStatus {
  RUNNING
  SUCCESS
  PARTIAL
  FAILED
  CANCELLED
}

model ScanSchedule {
  id             String   @id @default(cuid())
  name           String
  cronExpression String   // e.g. "0 2 * * *" for daily at 2 AM
  scanRequest    Json     // Store the ScanRequest configuration
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  lastRunAt      DateTime?
  nextRunAt      DateTime?
  createdBy      String?

  executions ScheduledScanExecution[]

  @@index([isActive])
  @@index([nextRunAt])
  @@map("scan_schedules")
}

model ScheduledScanExecution {
  id            String        @id @default(cuid())
  scheduleId    String
  schedule      ScanSchedule  @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  scanId        String?
  scan          Scan?         @relation(fields: [scanId], references: [id], onDelete: SetNull)
  executionTime DateTime      @default(now())
  status        String        // 'SUCCESS', 'FAILED', 'SKIPPED'
  errorMessage  String?

  @@index([scheduleId])
  @@index([executionTime])
  @@map("scheduled_scan_executions")
}

model ScanTemplate {
  id                 String   @id @default(cuid())
  name               String
  description        String?
  environment        String   // 'production', 'staging', 'development', 'any'
  scannerConfig      Json     // Which scanners to run, their settings
  policyConfig       Json?    // Risk thresholds, compliance requirements
  notificationConfig Json?    // Who to notify, when
  isDefault          Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  createdBy          String?

  @@index([environment])
  @@index([isDefault])
  @@map("scan_templates")
}

model BulkScanBatch {
  id           String   @id @default(cuid())
  name         String?  // Optional name for the bulk scan
  totalImages  Int
  status       String   // 'RUNNING', 'COMPLETED', 'FAILED'
  patterns     Json     // Store the search patterns used
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  completedAt  DateTime?
  errorMessage String?

  items BulkScanItem[]

  @@index([status])
  @@index([createdAt])
  @@map("bulk_scan_batches")
}

model BulkScanItem {
  id      String        @id @default(cuid())
  batchId String
  batch   BulkScanBatch @relation(fields: [batchId], references: [id], onDelete: Cascade)
  scanId  String
  scan    Scan          @relation(fields: [scanId], references: [id], onDelete: Cascade)
  imageId String
  image   Image         @relation(fields: [imageId], references: [id], onDelete: Cascade)
  status  String        // 'RUNNING', 'SUCCESS', 'FAILED'

  @@index([batchId])
  @@index([status])
  @@map("bulk_scan_items")
}
