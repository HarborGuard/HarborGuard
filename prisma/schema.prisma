generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "debian-openssl-3.0.x", "debian-openssl-1.1.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Image {
  id                   String               @id @default(cuid())
  name                 String
  tag                  String
  registry             String?
  source               ImageSource          @default(REGISTRY)
  digest               String               @unique
  platform             String?
  sizeBytes            Int?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  bulkScanItems        BulkScanItem[]
  cveClassifications   CveClassification[]
  imageVulnerabilities ImageVulnerability[]
  scans                Scan[]

  @@index([name, tag])
  @@index([registry, name, tag])
  @@index([digest])
  @@index([registry])
  @@index([source])
  @@map("images")
}

model Scan {
  id               String            @id @default(cuid())
  requestId        String            @unique
  imageId          String
  startedAt        DateTime
  finishedAt       DateTime?
  status           ScanStatus        @default(RUNNING)
  reportsDir       String?
  errorMessage     String?
  riskScore        Int?
  metadataId       String?           @unique
  source           String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  bulkScanItems              BulkScanItem[]
  scanResults                ScanResult[]
  metadata                   ScanMetadata?              @relation(fields: [metadataId], references: [id], onDelete: SetNull)
  image                      Image                      @relation(fields: [imageId], references: [id], onDelete: Cascade)
  vulnerabilityFindings      ScanVulnerabilityFinding[]
  packageFindings            ScanPackageFinding[]
  complianceFindings         ScanComplianceFinding[]
  efficiencyFindings         ScanEfficiencyFinding[]
  findingCorrelations        ScanFindingCorrelation[]

  @@index([requestId])
  @@index([status])
  @@index([startedAt])
  @@index([imageId])
  @@index([imageId, status])
  @@index([imageId, startedAt])
  @@index([status, startedAt])
  @@index([metadataId])
  @@map("scans")
}

model ScanMetadata {
  id                     String   @id @default(cuid())
  
  // Docker Image metadata
  dockerId               String?
  dockerOs               String?
  dockerArchitecture     String?
  dockerSize             BigInt?
  dockerAuthor           String?
  dockerCreated          DateTime?
  dockerVersion          String?
  dockerParent           String?
  dockerComment          String?
  dockerDigest           String?
  dockerConfig           Json?    // Complex nested object
  dockerRootFS           Json?    // Layers array
  dockerGraphDriver      Json?
  dockerRepoTags         Json?    // Array of strings
  dockerRepoDigests      Json?    // Array of strings
  dockerMetadata         Json?    // Docker-specific metadata
  dockerLabels           Json?    // Label key-value pairs
  dockerEnv              Json?    // Environment variables array
  
  // Scan Results from each scanner
  trivyResults           Json?
  grypeResults           Json?
  syftResults            Json?
  dockleResults          Json?
  osvResults             Json?
  diveResults            Json?
  
  // Aggregated Data
  vulnerabilityCritical  Int      @default(0)
  vulnerabilityHigh      Int      @default(0)
  vulnerabilityMedium    Int      @default(0)
  vulnerabilityLow       Int      @default(0)
  vulnerabilityInfo      Int      @default(0)
  complianceScore        Int?
  complianceGrade        String?
  complianceFatal        Int?
  complianceWarn         Int?
  complianceInfo         Int?
  compliancePass         Int?
  aggregatedRiskScore    Int?
  
  // Scanner versions
  scannerVersions        Json?
  
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  
  scan                   Scan?
  
  @@index([dockerDigest])
  @@index([aggregatedRiskScore])
  @@map("scan_metadata")
}

model ScanResult {
  id           String           @id @default(cuid())
  scanId       String
  scannerId    String
  rawOutput    Json?
  status       ScanResultStatus @default(SUCCESS)
  errorMessage String?
  createdAt    DateTime         @default(now())
  scan         Scan             @relation(fields: [scanId], references: [id], onDelete: Cascade)
  scanner      Scanner          @relation(fields: [scannerId], references: [id])

  @@index([scanId])
  @@index([scannerId])
  @@index([status])
  @@map("scan_results")
}

model Scanner {
  id            String       @id @default(cuid())
  name          String       @unique
  version       String
  type          ScannerType
  isActive      Boolean      @default(true)
  defaultConfig Json?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  scanResults   ScanResult[]

  @@index([name])
  @@index([type])
  @@index([isActive])
  @@map("scanners")
}

model BulkScanBatch {
  id           String         @id @default(cuid())
  totalImages  Int
  status       BatchStatus
  patterns     Json
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  completedAt  DateTime?
  errorMessage String?
  name         String?
  items        BulkScanItem[]

  @@index([status])
  @@index([createdAt])
  @@map("bulk_scan_batches")
}

model BulkScanItem {
  id      String        @id @default(cuid())
  batchId String
  scanId  String
  imageId String
  status  ItemStatus
  batch   BulkScanBatch @relation(fields: [batchId], references: [id], onDelete: Cascade)
  image   Image         @relation(fields: [imageId], references: [id], onDelete: Cascade)
  scan    Scan          @relation(fields: [scanId], references: [id], onDelete: Cascade)

  @@index([batchId])
  @@index([status])
  @@map("bulk_scan_items")
}

model Vulnerability {
  id                   String               @id @default(cuid())
  cveId                String               @unique
  title                String?
  description          String?
  severity             Severity
  cvssScore            Float?
  source               String?
  publishedAt          DateTime?
  modifiedAt           DateTime?
  imageVulnerabilities ImageVulnerability[]

  @@index([cveId])
  @@index([severity])
  @@index([cvssScore])
  @@map("vulnerabilities")
}

model ImageVulnerability {
  id                 String              @id @default(cuid())
  imageId            String
  vulnerabilityId    String
  packageName        String
  installedVersion   String?
  fixedVersion       String?
  status             VulnerabilityStatus @default(DETECTED)
  detectedAt         DateTime            @default(now())
  cveClassifications CveClassification[]
  image              Image               @relation(fields: [imageId], references: [id], onDelete: Cascade)
  vulnerability      Vulnerability       @relation(fields: [vulnerabilityId], references: [id], onDelete: Cascade)

  @@unique([imageId, vulnerabilityId, packageName])
  @@index([imageId])
  @@index([vulnerabilityId])
  @@index([status])
  @@index([packageName])
  @@map("image_vulnerabilities")
}

model CveClassification {
  id                   String             @id @default(cuid())
  imageVulnerabilityId String
  isFalsePositive      Boolean            @default(false)
  comment              String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  createdBy            String?
  imageId              String
  image                Image              @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageVulnerability   ImageVulnerability @relation(fields: [imageVulnerabilityId], references: [id], onDelete: Cascade)

  @@index([imageVulnerabilityId])
  @@index([imageId])
  @@index([isFalsePositive])
  @@map("cve_classifications")
}


model AuditLog {
  id        String      @id @default(cuid())
  eventType EventType
  category  LogCategory
  userIp    String
  userAgent String?
  userId    String?
  resource  String?
  action    LogAction
  details   Json?
  metadata  Json?
  timestamp DateTime    @default(now())

  @@index([eventType])
  @@index([category])
  @@index([userIp])
  @@index([timestamp])
  @@index([resource])
  @@map("audit_logs")
}

model Repository {
  id                String           @id @default(cuid())
  name              String
  type              RepositoryType
  registryUrl       String
  username          String
  encryptedPassword String
  organization      String?
  status            RepositoryStatus @default(UNTESTED)
  lastTested        DateTime?
  repositoryCount   Int?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@index([type])
  @@index([status])
  @@index([createdAt])
  @@map("repositories")
}

// ============================================
// Scanner Finding Tables - Normalized Results
// ============================================

model ScanVulnerabilityFinding {
  id                String   @id @default(cuid())
  scanId            String
  source            String   // 'trivy', 'grype', 'osv'
  
  // Core vulnerability info
  cveId             String
  packageName       String
  installedVersion  String?
  fixedVersion      String?
  severity          Severity
  cvssScore         Float?
  
  // Source-specific metadata
  dataSource        String?  // 'nvd', 'ghsa', 'redhat', etc.
  vulnerabilityUrl  String?
  title             String?
  description       String?  @db.Text
  publishedDate     DateTime?
  lastModified      DateTime?
  
  // Location info
  filePath          String?
  layerId           String?
  packageType       String?  // 'os', 'library', 'application'
  
  // Scanner-specific raw data
  rawFinding        Json?    // Original finding from scanner
  
  createdAt         DateTime @default(now())
  scan              Scan     @relation(fields: [scanId], references: [id], onDelete: Cascade)
  
  @@index([scanId])
  @@index([cveId])
  @@index([source])
  @@index([severity])
  @@index([packageName])
  @@index([scanId, cveId, source]) // For cross-scanner analysis
  @@map("scan_vulnerability_findings")
}

model ScanPackageFinding {
  id                String   @id @default(cuid())
  scanId            String
  source            String   // 'syft', 'trivy', 'grype'
  
  // Package identification
  packageName       String
  version           String?
  type              String   // 'npm', 'python', 'go', 'os', etc.
  purl              String?  // Package URL
  
  // Package metadata
  license           String?
  vendor            String?
  publisher         String?
  ecosystem         String?
  language          String?
  
  // Location info
  filePath          String?
  layerId           String?
  installedSize     BigInt?
  
  // Additional metadata
  metadata          Json?    // Flexible field for scanner-specific data
  dependencies      Json?    // Array of dependency purls
  
  createdAt         DateTime @default(now())
  scan              Scan     @relation(fields: [scanId], references: [id], onDelete: Cascade)
  
  @@index([scanId])
  @@index([packageName])
  @@index([source])
  @@index([type])
  @@index([ecosystem])
  @@map("scan_package_findings")
}

model ScanComplianceFinding {
  id                String   @id @default(cuid())
  scanId            String
  source            String   // 'dockle', future compliance scanners
  
  // Compliance violation info
  ruleId            String
  ruleName          String
  category          String   // 'CIS', 'Security', 'BestPractice'
  severity          Severity
  
  // Details
  message           String   @db.Text
  description       String?  @db.Text
  remediation       String?  @db.Text
  
  // Context
  filePath          String?
  lineNumber        Int?
  code              String?  @db.Text
  
  // Raw data
  rawFinding        Json?
  
  createdAt         DateTime @default(now())
  scan              Scan     @relation(fields: [scanId], references: [id], onDelete: Cascade)
  
  @@index([scanId])
  @@index([ruleId])
  @@index([source])
  @@index([severity])
  @@index([category])
  @@map("scan_compliance_findings")
}

model ScanEfficiencyFinding {
  id                String   @id @default(cuid())
  scanId            String
  source            String   // 'dive', future efficiency scanners
  
  // Finding type
  findingType       String   // 'wasted_space', 'duplicate_files', 'large_layer'
  severity          String   // 'info', 'warning', 'critical'
  
  // Layer/file info
  layerId           String?
  layerIndex        Int?
  layerCommand      String?  @db.Text
  
  // Size metrics
  sizeBytes         BigInt?
  wastedBytes       BigInt?
  efficiencyScore   Float?   // 0-100
  
  // Details
  description       String   @db.Text
  filePaths         Json?    // Array of affected file paths
  
  // Raw data
  rawFinding        Json?
  
  createdAt         DateTime @default(now())
  scan              Scan     @relation(fields: [scanId], references: [id], onDelete: Cascade)
  
  @@index([scanId])
  @@index([findingType])
  @@index([source])
  @@index([layerId])
  @@map("scan_efficiency_findings")
}

// Cross-scanner correlation for consensus analysis
model ScanFindingCorrelation {
  id                String   @id @default(cuid())
  scanId            String
  
  findingType       String   // 'vulnerability', 'package', etc.
  correlationKey    String   // CVE ID, package name, etc.
  
  sources           Json     // Array of scanner names that found this
  sourceCount       Int      // Number of scanners that found this
  confidenceScore   Float    // 0-1 based on agreement
  
  // Aggregated severity (highest from all sources)
  severity          Severity?
  
  createdAt         DateTime @default(now())
  scan              Scan     @relation(fields: [scanId], references: [id], onDelete: Cascade)
  
  @@unique([scanId, findingType, correlationKey])
  @@index([scanId])
  @@index([correlationKey])
  @@index([sourceCount])
  @@map("scan_finding_correlations")
}

enum RepositoryType {
  DOCKERHUB
  GHCR
  GENERIC
}

enum RepositoryStatus {
  UNTESTED
  ACTIVE
  ERROR
}

enum ScanStatus {
  PENDING
  RUNNING
  SUCCESS
  PARTIAL
  FAILED
  CANCELLED
}

enum ScanResultStatus {
  SUCCESS
  FAILED
  PARTIAL
}

enum ScannerType {
  VULNERABILITY
  COMPLIANCE
  SBOM
  ANALYSIS
}

enum BatchStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum ItemStatus {
  PENDING
  RUNNING
  SUCCESS
  FAILED
  CANCELLED
}

enum Severity {
  CRITICAL
  HIGH
  MEDIUM
  LOW
  INFO
}

enum VulnerabilityStatus {
  DETECTED
  FIXED
  IGNORED
  FALSE_POSITIVE
}

enum ImageSource {
  REGISTRY
  LOCAL_DOCKER
  FILE_UPLOAD
  REGISTRY_PRIVATE
}

enum EventType {
  SCAN_START
  SCAN_COMPLETE
  SCAN_FAILED
  IMAGE_ADDED
  IMAGE_REMOVED
  USER_LOGIN
  CONFIG_CHANGE
  SYSTEM_EVENT
}

enum LogCategory {
  SECURITY
  OPERATIONAL
  INFORMATIVE
  ERROR
}

enum LogAction {
  CREATE
  UPDATE
  DELETE
  VIEW
  SCAN
  UPLOAD
  DOWNLOAD
  LOGIN
  LOGOUT
}
